#header()

#set($subsystem = $helper.getByName($subsystem-name, $robot))

from core import RobotMap
from commands import *
${helper.getImports($subsystem, "RobotMap")}
from wpilib import PIDSubsystem, LiveWindow

class #class($subsystem.name)(PIDSubsystem):
    def __init__(self):
        """Initialize your subsystem here"""
#@autogenerated_code("declarations", "        ")
#parse("${exporter-path}subsystems/Subsystem-declarations.py")
#end

#@autogenerated_code("pid", "        ")
#parse("${exporter-path}subsystems/PIDSubsystem-pid.py")
#end

        # Use these to get going:
        # self.SetSetpoint() - Sets where the PID controller should move the
        #                      system to
        # self.Enable() - Enables the PID controller.

    def InitDefaultCommand(self):
#@autogenerated_code("default_command", "        ")
#parse("${exporter-path}subsystems/Subsystem-default_command.py")
#end

        # Set the default command for a subsystem here.
        # self.SetDefaultCommand(MySpecialCommand())

    def ReturnPIDInput(self):
        # Return your input value for the PID loop
        # e.g. a sensor, like a potentiometer:
        # self.yourPot.GetAverageVoltage() / kYourMaxVoltage

#@autogenerated_code("source", "        ")
#parse("${exporter-path}subsystems/PIDSubsystem-source.py")
#end

    def UsePIDOutput(self, output):
        # Use output to drive your system, like a motor
        # e.g. self.yourMotor.Set(output)

#@autogenerated_code("output", "        ")
#parse("${exporter-path}subsystems/PIDSubsystem-output.py")
#end
