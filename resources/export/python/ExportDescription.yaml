## This file describes the export from RobotBuilder to python. The
## format is YAML 1.1 (http://www.yaml.org/) with instructions that
## are post-processed with Velocity (velocity.apache.org). 
##
## Name: The name of this exporter to be displayed in menus.
## Type: The type, this will affect where it is displayed.
## Toolbar: Whether or not it displays on the toolbar by default.
## Files: A YAML file pre-processed by velocity that describes which
##     files to export and how.
## Begin Modification: A string that indicates the beginning of an
##     area that will be modified and replaced by auto-generated code.
## End Modification: A string that indicates the end of an area
##     that will be modified and replaced by auto-generated code.
## Required Properties: A list of robot properties that must be filled
##     out for this export to actually begin export. If these are not
##     filled out, the export alerts the user and stops.
## Vars: A map of variable names to values that are available for the
##     entire export.
## Macros: A file containing the velocity macros for this export.
##
## Defaults: A map of default names to their instruction sets. The
##     instruction sets are a map of instruction names to instructions
##     that may contain velocity templating. These defaults are used
##     if component instructions do not specify a specific
##     instruction.
##
## Instructions: A map of palette components to their defaults and
##     instruction sets. The defaults are a comma-seperated string
##     with the highest priority default first. The instructions
##     themselves vary from language to language, in the java
##     exporter:
##
##     - Export: The export instruction specifies the file to export
##           this component to.
##     - Import: The java import so that this component is properly
##           imported in the generated java file
##     - Declaration: The declaration to declare a variable
##           representing this component.
##     - Construction: The constructor to create this component.
##     - LiveWindow: Put this component on the livewindow properly.
##     - Extra: Extra configuration for after the constructor is done.
##     - ClassName: The java class name of this object.

Name: Python
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: \# BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: \# END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Python Project Directory
  - Team Number

Vars:
  team-number: ${robot.getProperty('Team Number').getValue()}
  robot-name: ${robot.getName().replace(' ', '')}
  project: ${robot.getProperty('Python Project Directory').getValue()}$file-separator$robot-name

Macros: macros.vm

Post Export Action: "#Message:You have successfully exported. You can now open the project and extend the generated code."

Instruction Names: ["Export", "Import", "Declaration", "Construction", "LiveWindow", "Extra", "Function", "PID", "ClassName"]

Defaults:
  Component:
    Export: "RobotMap"
    Import: "from wpilib import *"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    LiveWindow: ""
    Extra: ""
    Function: ""
    PID: "#variable($Short_Name).PIDGet()"
    ClassName: ""
  AnalogInput:
    Construction: "self.#variable($Name) = ${ClassName}(${Input_Module_Analog}, ${Input_Channel_Analog})"
    LiveWindow: "lw.AddSensor(\"$Subsystem\", \"$Short_Name\", #variable($Name))"
  DigitalInput:
    Construction: "self.#variable($Name) = ${ClassName}(${Input_Module_Digital}, ${Input_Channel_Digital})"
    LiveWindow: "lw.AddSensor(\"$Subsystem\", \"$Short_Name\", #variable($Name))"
  PWMOutput:
    Construction: "self.#variable($Name) = ${ClassName}(${Output_Module_Digital}, ${Output_Channel_PWM})"
    LiveWindow: "lw.AddActuator(\"$Subsystem\", \"$Short_Name\", #variable($Name))"
  RelayOutput:
    Construction: "self.#variable($Name) = ${ClassName}(${Output_Module_Digital}, ${Output_Channel_Relay})"
    LiveWindow: "lw.AddActuator(\"$Subsystem\", \"$Short_Name\", #variable($Name))"
  SolenoidOutput:
    Construction: "self.#variable($Name) = ${ClassName}(${Output_Module_Solenoid}, ${Output_Channel_Solenoid})"
    LiveWindow: "lw.AddActuator(\"$Subsystem\", \"$Short_Name\", #variable($Name))"
  OI:
    Export: "OI"
    Import: "from wpilib import *"
    Construction: "self.#variable($Name) = ${ClassName}()"
  Button:
    Import: "from wpilib import *"
    Extra:  "#if(\"$Command\" != \"None\")self.#variable($Name).${When_to_Run.substring(0,1).toUpperCase()}${When_to_Run.substring(1)}(#class($Command)())#end"
  Command:
    Export: ""
    Import: "from commands import *"

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "from subsystems import *"
    Construction: "self.#variable($Short_Name) = #class($Short_Name)()"
  PID Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "from subsystems import *"
    Construction: "self.#variable($Short_Name) = #class($Short_Name)()"

  PID Controller:
    Defaults: "Component,None"
    ClassName: "PIDController"
    Import: "from wpilib import *"
    Construction: "self.#variable($Name) = ${ClassName}($P, $I, $D, $F, self.#variable($Input), self.#variable($Output), $Period)"
    Extra: >
      self.#variable($Name).SetContinuous(${Continuous})
      self.#variable($Name).SetAbsoluteTolerance(${Tolerance})
      #if($Limit_Input)
      
              self.#variable($Name).SetInputRange(${Minimum_Input}, ${Maximum_Input})#end
      #if(true)

              self.#variable($Name).SetOutputRange(${Minimum_Output}, ${Maximum_Output})#end
      #if($Send_to_SmartDashboard)

              \\# SmartDashboard.PutData("${Name}", self.#variable($Name))#end
      
    LiveWindow: "lw.AddActuator(\"$Subsystem\", \"$Short_Name\", self.#variable($Name))"

  Robot Drive 2:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Construction: "self.#variable($Name) = ${ClassName}(self.#variable($Left_Motor), self.#variable($Right_Motor))"
    Extra: >
      self.#variable($Name).SetSafetyEnabled(#truefalse($Safety_Enabled))
              self.#variable($Name).SetExpiration($Safety_Expiration_Time)
              self.#variable($Name).SetSensitivity($Sensitivity)
              self.#variable($Name).SetMaxOutput($Maximum_Output)
      #if($Left_Motor_Inverted)
              self.#variable($Name).SetInvertedMotor(RobotDrive.kRearLeft, True)#end
      #if($Right_Motor_Inverted)

              self.#variable($Name).SetInvertedMotor(RobotDrive.kRearRight, True)#end
              
  Robot Drive 4:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Construction: >-
      self.#variable($Name) = ${ClassName}(self.#variable($Left_Front_Motor), self.#variable($Left_Rear_Motor),
                    self.#variable($Right_Front_Motor), self.#variable($Right_Rear_Motor))
    Extra: >
      self.#variable($Name).SetSafetyEnabled($Safety_Enabled)
              self.#variable($Name).SetExpiration($Safety_Expiration_Time)
              self.#variable($Name).SetSensitivity($Sensitivity)
              self.#variable($Name).SetMaxOutput($Maximum_Output)
      #if($Left_Front_Motor_Inverted)
              self.#variable($Name).SetInvertedMotor(RobotDrive.kFrontLeft, True)#end
      #if($Left_Rear_Motor_Inverted)

              self.#variable($Name).SetInvertedMotor(RobotDrive.kRearLeft, True)#end
      #if($Right_Front_Motor_Inverted)

              self.#variable($Name).SetInvertedMotor(RobotDrive.kFrontRight, True)#end
      #if($Right_Rear_Motor_Inverted)

              self.#variable($Name).SetInvertedMotor(RobotDrive.kRearRight, True)#end

  Gyro:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Gyro"
    Extra: "self.#variable($Name).SetSensitivity(${Sensitivity})"
  Accelerometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Accelerometer"
    Extra: >-
      self.#variable($Name).SetSensitivity(${Volts_Per_G})
              self.#variable($Name).SetZero(${Zero_G_Volts})
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Construction: "self.#variable($Name) = ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, Counter.${Encoding_Type})"
    Extra: >-
      self.#variable($Name).SetDistancePerPulse(${Distance_Per_Pulse})
              self.#variable($Name).SetPIDSourceParameter(Encoder.${PID_Source})
              self.#variable($Name).Start()
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Construction: "self.#variable($Name) = ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Index_Module_Digital}, ${Index_Channel_Digital}, ${Reverse_Direction})"
    Extra: >-
      self.#variable($Name).SetDistancePerPulse(${Distance_Per_Pulse})
              self.#variable($Name).SetPIDSourceParameter(Encoder.${PID_Source})
              self.#variable($Name).Start()
  Gear Tooth Sensor:
    Defaults: "DigitalInput,Component,None"
    ClassName: "GearTooth"
    Construction: "self.#variable($Name) = ${ClassName}(${Input_Module_Digital}, ${Input_Channel_Digital}, ${Direction_Sensitive})"
  Potentiometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Ultrasonic:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Ultrasonic"
    Construction: "self.#variable($Name) = ${ClassName}(${Ping_Module_Digital}, ${Ping_Channel_Digital}, ${Echo_Module_Digital}, ${Echo_Channel_Digital})"
      
  Speed Controller:
    Defaults: "PWMOutput,Component,None"
    ClassName: "SpeedController"
    Construction: "self.#variable($Name) = ${Type}(${Output_Module_Digital}, ${Output_Channel_PWM})"
    LiveWindow: "lw.AddActuator(\"$Subsystem\", \"$Short_Name\", self.#variable($Name))"
  CAN Jaguar:
    Defaults: "Component,None"
    ClassName: "CANJaguar"
    Construction: "self.#variable($Name) = ${ClassName}($CAN_ID)"
  Servo:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Servo"
  Digital Output:
    Defaults: "Component,None"
    ClassName: "DigitalOutput"
    Construction: "self.#variable($Name) = ${ClassName}(${Output_Module_Digital}, ${Output_Channel_Digital})"
  Spike:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"

  Compressor:
    Defaults: "Component,None"
    ClassName: "Compressor"
    Construction: "self.#variable($Name) = ${ClassName}(${Pressure_Switch_Module_Digital}, ${Pressure_Switch_Channel_Digital}, ${Spike_Module_Digital}, ${Spike_Channel_Relay})"
  Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "Solenoid"
  Relay Solenoid:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
  Double Solenoid:
    Defaults: "Solenoid,Component,None"
    ClassName: "DoubleSolenoid"
    Construction: >-
      #if(${Forward_Module_Solenoid} != ${Reverse_Module_Solenoid})Warning, the two modules in robot builder are different!
      
      #end##
      
      self.#variable($Name) = ${ClassName}(${Forward_Module_Solenoid}, ${Forward_Channel_Solenoid}, ${Reverse_Channel_Solenoid})

  Joystick:
    Defaults: "OI,None"
    ClassName: "Joystick"
    Construction: "self.#variable($Name) = ${ClassName}(${Number})"
    Function: >-
        def Get#class($Name)(self): return self.#variable($Name)
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "self.#variable($Name) = ${ClassName}(self.#variable($Joystick), ${Button})"
  Kinect Joystick:
    Defaults: "OI,None"
    ClassName: "KinectStick"
    Construction: "self.#variable($Name) = ${ClassName}(${Number})"
    Function: >-
        def Get#class($Name)(self): return self.#variable($Name)
  Analog Button:
    Defaults: "Button,OI,None"
    ClassName: "AnalogIOButton"
    Construction: "self.#variable($Name) = ${ClassName}(#variable($Analog_Pin))"
  Digital Button:
    Defaults: "Button,OI,None"
    ClassName: "DigitalIOButton"
    Construction: "self.#variable($Name) = ${ClassName}(#variable($Digital_Pin))"
  OI Digital Input:
    Defaults: "OI,None"
    Function: >-
        def Get#class($Name)(self): return DriverStation.GetInstance().GetDigitalIn($Digital_Pin)
  OI Digital Output:
    Defaults: "OI,None"
    Function: >-
        def Set#class($Name)(self, value): DriverStation.GetInstance().SetDigitalOut($Digital_Pin, value)
  OI Analog Input:
    Defaults: "OI,None"
    Function: >-
        def Get#class($Name)(self): return DriverStation.GetInstance().GetAnalogIn($Analog_Pin)

  Command:
    Defaults: "Command,None"
  Command Group:
    Defaults: "Command,None"
  PID Command:
    Defaults: "Command,None"
  Setpoint Command:
    Defaults: "Command,None"
